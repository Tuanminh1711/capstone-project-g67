import { Component, OnInit, ChangeDetectorRef, OnDestroy } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { TopNavigatorComponent } from '../../shared/top-navigator/index';
import { CommonModule } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { BehaviorSubject, Subscription, filter } from 'rxjs';
import { PlantDataService } from '../../shared/plant-data.service';

interface Plant {
  id: number;
  scientificName: string;
  commonName: string;
  categoryName: string;
  description: string;
  careInstructions: string;
  lightRequirement: string;
  waterRequirement: string;
  careDifficulty: string;
  suitableLocation: string;
  commonDiseases: string;
  status: string;
  imageUrls: string[];
  createdAt: string | null;
}

@Component({
  selector: 'app-plant-info',
  standalone: true,
  imports: [TopNavigatorComponent, CommonModule, FormsModule],
  templateUrl: './plant-info.html',
  styleUrl: './plant-info.scss'
})
export class PlantInfoComponent implements OnInit, OnDestroy {
  private plantsSubject = new BehaviorSubject<Plant[]>([]);
  plants$ = this.plantsSubject.asObservable();

  searchText = '';
  loading = false;
  error = '';
  usingDemoData = false;

  currentPage = 0;
  pageSize = 8;
  totalPages = 1;
  totalElements = 0;

  private searchDebounce: any;
  private currentKeyword = '';
  private navigationSubscription: Subscription;

  private categoriesSubject = new BehaviorSubject<Array<{ id: number; name: string; description: string }>>([]);
  categories$ = this.categoriesSubject.asObservable();
  loadingCategories = false;
  errorCategories = '';

  selectedCategoryId: number | null = null;

  constructor(
    private http: HttpClient,
    private cdr: ChangeDetectorRef,
    private router: Router,
    private plantDataService: PlantDataService
  ) {
    // Listen for navigation events to refresh data when coming from create page
    this.navigationSubscription = this.router.events
      .pipe(filter(event => event instanceof NavigationEnd))
      .subscribe((event: NavigationEnd) => {
        if (event.url === '/main/plant-info') {
          console.log('üîÑ Detected navigation to plant-info, refreshing data...');
          setTimeout(() => this.refreshData(), 100);
        }
      });
  }

  ngOnInit(): void {
    // Force refresh t·ª´ server m·ªói khi component init
    // ƒêi·ªÅu n√†y ƒë·∫£m b·∫£o lu√¥n c√≥ d·ªØ li·ªáu m·ªõi nh·∫•t
    console.log('üîÑ PlantInfo Component init - fetching fresh data');
    this.fetchPlants(0, '');
    this.loadCategories();

    // ƒê·ªçc l·∫°i category ƒë√£ ch·ªçn t·ª´ localStorage khi reload
    try {
      const savedCatId = localStorage.getItem('selectedCategoryId');
      if (savedCatId) {
        this.selectedCategoryId = Number(savedCatId);
      }
    } catch {}
  }

  private buildUrl(page: number, keyword: string): string {
    let url = `/api/plants/search?pageNo=${page}&pageSize=${this.pageSize}`;
    if (keyword.trim()) {
      url += `&keyword=${encodeURIComponent(keyword.trim())}`;
    }
    return url;
  }

  fetchPlants(page: number, keyword: string = ''): void {
    // Lu√¥n fetch m·ªõi t·ª´ server, kh√¥ng ∆∞u ti√™n cache khi user thao t√°c ho·∫∑c reload
    this.loading = true;
    this.error = '';
    const trimmedKeyword = keyword.trim();
    const url = this.buildUrl(page, trimmedKeyword);

    this.http.get<any>(url).subscribe({
      next: (res) => {
        const data = res?.data;
        this.loading = false;
        this.currentKeyword = trimmedKeyword;

        if (!data || !Array.isArray(data.plants)) {
          this.resetResults();
          this.plantsSubject.next([]);
          this.cdr.detectChanges();
          return;
        }

        this.totalPages = data.totalPages ?? 1;
        this.totalElements = data.totalElements ?? data.plants.length;
        this.currentPage = page;
        this.pageSize = data.pageSize ?? this.pageSize;

        this.plantsSubject.next(data.plants);
        this.plantDataService.setPlantsList(data.plants);
        this.cachePlants(data.plants, page, trimmedKeyword);
        this.usingDemoData = false;
        this.cdr.detectChanges();
      },
      error: (error) => {
        console.warn('Plants API not available, using demo data:', error.message);
        this.loading = false;
        this.usingDemoData = true;
        
        // Provide demo/fallback data when API fails
        const demoPlants: Plant[] = this.getDemoPlants();
        
        // Filter demo plants based on keyword if provided
        let filteredPlants = demoPlants;
        if (trimmedKeyword) {
          filteredPlants = demoPlants.filter(plant => 
            plant.commonName.toLowerCase().includes(trimmedKeyword.toLowerCase()) ||
            plant.scientificName.toLowerCase().includes(trimmedKeyword.toLowerCase()) ||
            plant.categoryName.toLowerCase().includes(trimmedKeyword.toLowerCase())
          );
        }
        
        // Simulate pagination
        const startIndex = page * this.pageSize;
        const endIndex = startIndex + this.pageSize;
        const paginatedPlants = filteredPlants.slice(startIndex, endIndex);
        
        this.totalPages = Math.ceil(filteredPlants.length / this.pageSize);
        this.totalElements = filteredPlants.length;
        this.currentPage = page;
        this.currentKeyword = trimmedKeyword;
        
        this.plantsSubject.next(paginatedPlants);
        this.plantDataService.setPlantsList(paginatedPlants);
        this.cdr.detectChanges();
        
        // Show info message only once
        if (page === 0 && !trimmedKeyword) {
          console.info('S·ª≠ d·ª•ng d·ªØ li·ªáu demo do API kh√¥ng kh·∫£ d·ª•ng');
        }
      }
    });
  }

  loadCategories() {
    this.loadingCategories = true;
    this.errorCategories = '';
    this.http.get<any>('http://localhost:8080/api/plants/categories').subscribe({
      next: (res) => {
        this.categoriesSubject.next(res.data || []);
        this.loadingCategories = false;
      },
      error: (err) => {
        this.errorCategories = 'Kh√¥ng th·ªÉ t·∫£i danh m·ª•c c√¢y.';
        this.categoriesSubject.next([]);
        this.loadingCategories = false;
      }
    });
  }

  onSearch(): void {
    const keyword = this.searchText.trim();
    if (keyword !== this.currentKeyword) {
      this.fetchPlants(0, keyword);
    }
  }

  onSearchInputChange(): void {
    clearTimeout(this.searchDebounce);
    this.searchDebounce = setTimeout(() => {
      const keyword = this.searchText.trim();
      if (keyword !== this.currentKeyword) {
        this.fetchPlants(0, keyword);
      }
    }, 300);
  }

  goToPage(page: number): void {
    if (page >= 0 && page < this.totalPages) {
      this.fetchPlants(page, this.currentKeyword);
    }
  }

  private resetResults(): void {
    this.totalPages = 1;
    this.totalElements = 0;
    this.currentPage = 0;
  }

  viewPlantDetail(plantId: number): void {
    // T√¨m c√¢y trong danh s√°ch hi·ªán t·∫°i v√† l∆∞u v√†o service
    const currentPlants = this.plantsSubject.value;
    const selectedPlant = currentPlants.find(p => p.id === plantId);
    
    console.log('ViewPlantDetail called with ID:', plantId);
    console.log('Current plants:', currentPlants);
    console.log('Selected plant:', selectedPlant);
    
    if (selectedPlant) {
      this.plantDataService.setSelectedPlant(selectedPlant);
      console.log('Plant saved to service');
    } else {
      console.log('Plant not found in current list');
    }
    
    this.router.navigate(['/plant-info/detail', plantId]);
  }

  /**
   * Clear cache khi c·∫ßn refresh d·ªØ li·ªáu
   */
  private clearCache(): void {
    try {
      localStorage.removeItem('plants_list_cache');
      console.log('üóëÔ∏è Cleared plants cache');
    } catch (e) {
      console.log('Failed to clear cache:', e);
    }
  }

  /**
   * Force refresh - clear cache v√† fetch l·∫°i
   */
  forceRefresh(): void {
    this.clearCache();
    this.plantsSubject.next([]);
    this.fetchPlants(0, '');
  }

  /**
   * Translate light requirement enum to Vietnamese
   */
  translateLightRequirement(value: string): string {
    const translations: { [key: string]: string } = {
      'LOW': '√çt √°nh s√°ng',
      'MEDIUM': '√Ånh s√°ng v·ª´a ph·∫£i',
      'HIGH': 'Nhi·ªÅu √°nh s√°ng'
    };
    return translations[value?.toUpperCase()] || value || 'Ch∆∞a c√≥ th√¥ng tin';
  }

  /**
   * Translate water requirement enum to Vietnamese
   */
  translateWaterRequirement(value: string): string {
    const translations: { [key: string]: string } = {
      'LOW': '√çt n∆∞·ªõc',
      'MEDIUM': 'N∆∞·ªõc v·ª´a ph·∫£i',
      'HIGH': 'Nhi·ªÅu n∆∞·ªõc'
    };
    return translations[value?.toUpperCase()] || value || 'Ch∆∞a c√≥ th√¥ng tin';
  }

  /**
   * Translate care difficulty enum to Vietnamese
   */
  translateCareDifficulty(value: string): string {
    const translations: { [key: string]: string } = {
      'EASY': 'D·ªÖ chƒÉm s√≥c',
      'MODERATE': 'Trung b√¨nh',
      'DIFFICULT': 'Kh√≥ chƒÉm s√≥c'
    };
    return translations[value?.toUpperCase()] || value || 'Ch∆∞a c√≥ th√¥ng tin';
  }

  /**
   * Translate category name to Vietnamese
   */
  translateCategoryName(name: string): string {
    switch (name) {
      case 'Indoor Plants': return 'C√¢y tr·ªìng trong nh√†';
      case 'Outdoor Plants': return 'C√¢y ngo√†i tr·ªùi';
      case 'Succulents': return 'C√¢y m·ªçng n∆∞·ªõc';
      default: return name;
    }
  }

  /**
   * Cache d·ªØ li·ªáu v√†o localStorage
   */
  private cachePlants(plants: Plant[], page: number, keyword: string): void {
    try {
      const cacheData = {
        plants: plants,
        currentPage: page,
        totalPages: this.totalPages,
        totalElements: this.totalElements,
        keyword: keyword,
        cachedAt: new Date().toISOString()
      };
      localStorage.setItem('plants_list_cache', JSON.stringify(cacheData));
      console.log('üíæ Cached plants list:', plants.length, 'items');
    } catch (e) {
      console.log('Failed to cache plants:', e);
    }
  }

  /**
   * T·∫°o d·ªØ li·ªáu demo khi API kh√¥ng ho·∫°t ƒë·ªông
   */
  private getDemoPlants(): Plant[] {
    return [
      {
        id: 1,
        scientificName: 'Ficus elastica',
        commonName: 'C√¢y cao su',
        categoryName: 'C√¢y c·∫£nh trong nh√†',
        description: 'C√¢y cao su l√† m·ªôt lo·∫°i c√¢y c·∫£nh ph·ªï bi·∫øn v·ªõi l√° to, b√≥ng v√† m√†u xanh ƒë·∫≠m. R·∫•t d·ªÖ chƒÉm s√≥c v√† ph√π h·ª£p tr·ªìng trong nh√†.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc khi ƒë·∫•t kh√¥, ƒë·∫∑t n∆°i c√≥ √°nh s√°ng gi√°n ti·∫øp, lau l√° th∆∞·ªùng xuy√™n ƒë·ªÉ gi·ªØ ƒë·ªô b√≥ng.',
        lightRequirement: 'MEDIUM',
        waterRequirement: 'MEDIUM',
        careDifficulty: 'EASY',
        suitableLocation: 'Ph√≤ng kh√°ch, ban c√¥ng c√≥ m√°i che',
        commonDiseases: 'R·ªâ s·∫Øt, th·ªëi r·ªÖ do t∆∞·ªõi n∆∞·ªõc qu√° nhi·ªÅu',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=1'],
        createdAt: '2024-01-15T10:30:00Z'
      },
      {
        id: 2,
        scientificName: 'Sansevieria trifasciata',
        commonName: 'C√¢y l∆∞·ª°i h·ªï',
        categoryName: 'C√¢y c·∫£nh trong nh√†',
        description: 'C√¢y l∆∞·ª°i h·ªï c√≥ l√° d√†i, th·∫≥ng ƒë·ª©ng v·ªõi h·ªça ti·∫øt s·ªçc v√†ng xanh ƒë·∫∑c tr∆∞ng. R·∫•t d·ªÖ chƒÉm s√≥c v√† c√≥ kh·∫£ nƒÉng l·ªçc kh√¥ng kh√≠ t·ªët.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc √≠t, kho·∫£ng 1-2 tu·∫ßn/l·∫ßn. C√≥ th·ªÉ s·ªëng trong ƒëi·ªÅu ki·ªán √°nh s√°ng y·∫øu.',
        lightRequirement: 'LOW',
        waterRequirement: 'LOW',
        careDifficulty: 'EASY',
        suitableLocation: 'Ph√≤ng ng·ªß, vƒÉn ph√≤ng, ph√≤ng t·∫Øm',
        commonDiseases: 'Th·ªëi r·ªÖ do t∆∞·ªõi n∆∞·ªõc qu√° nhi·ªÅu',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=2'],
        createdAt: '2024-01-20T14:15:00Z'
      },
      {
        id: 3,
        scientificName: 'Pothos aureus',
        commonName: 'C√¢y tr·∫ßu b√†',
        categoryName: 'C√¢y c·∫£nh trong nh√†',
        description: 'C√¢y tr·∫ßu b√† l√† lo·∫°i c√¢y leo v·ªõi l√° c√≥ m√†u xanh v√† v√†ng ƒë·∫πp m·∫Øt. D·ªÖ tr·ªìng v√† c√≥ th·ªÉ ph√°t tri·ªÉn t·ªët trong n∆∞·ªõc ho·∫∑c ƒë·∫•t.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n, ƒë·∫∑t n∆°i c√≥ √°nh s√°ng gi√°n ti·∫øp, c√≥ th·ªÉ c·∫Øt t·ªâa ƒë·ªÉ t·∫°o h√¨nh.',
        lightRequirement: 'MEDIUM',
        waterRequirement: 'MEDIUM',
        careDifficulty: 'EASY',
        suitableLocation: 'Treo ·ªü ban c√¥ng, k·ªá s√°ch, b√†n l√†m vi·ªác',
        commonDiseases: 'L√° v√†ng do thi·∫øu n∆∞·ªõc ho·∫∑c √°nh s√°ng',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=3'],
        createdAt: '2024-02-01T09:45:00Z'
      },
      {
        id: 4,
        scientificName: 'Aloe vera',
        commonName: 'Nha ƒëam',
        categoryName: 'C√¢y th·∫£o d∆∞·ª£c',
        description: 'Nha ƒëam l√† c√¢y m·ªçng n∆∞·ªõc c√≥ nhi·ªÅu c√¥ng d·ª•ng trong y h·ªçc v√† l√†m ƒë·∫πp. L√° d√†y, ch·ª©a gel trong su·ªët c√≥ t√≠nh kh√°ng khu·∫©n.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc √≠t, ƒë·∫∑t n∆°i c√≥ √°nh s√°ng tr·ª±c ti·∫øp, tr√°nh √∫ng n∆∞·ªõc.',
        lightRequirement: 'HIGH',
        waterRequirement: 'LOW',
        careDifficulty: 'EASY',
        suitableLocation: 'Ban c√¥ng c√≥ √°nh n·∫Øng, c·ª≠a s·ªï h∆∞·ªõng nam',
        commonDiseases: 'Th·ªëi r·ªÖ, ch√°y l√° do √°nh n·∫Øng qu√° m·∫°nh',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=4'],
        createdAt: '2024-02-10T16:20:00Z'
      },
      {
        id: 5,
        scientificName: 'Monstera deliciosa',
        commonName: 'C√¢y l√° x·∫ª',
        categoryName: 'C√¢y c·∫£nh trong nh√†',
        description: 'C√¢y l√° x·∫ª c√≥ l√° to v·ªõi nh·ªØng l·ªó th·ªßng t·ª± nhi√™n ƒë·∫∑c tr∆∞ng, t·∫°o v·∫ª ƒë·∫πp nhi·ªát ƒë·ªõi. L√† c√¢y c·∫£nh n·ªôi th·∫•t ƒë∆∞·ª£c ∆∞a chu·ªông.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc khi ƒë·∫•t kh√¥, ƒë·∫∑t n∆°i c√≥ √°nh s√°ng gi√°n ti·∫øp, c·∫ßn c·ªôt h·ªó tr·ª£ khi c√¢y l·ªõn.',
        lightRequirement: 'MEDIUM',
        waterRequirement: 'MEDIUM',
        careDifficulty: 'MODERATE',
        suitableLocation: 'Ph√≤ng kh√°ch r·ªông, g√≥c ph√≤ng c√≥ √°nh s√°ng',
        commonDiseases: 'L√° v√†ng, r·ªáp, nh·ªán ƒë·ªè',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=5'],
        createdAt: '2024-02-15T11:10:00Z'
      },
      {
        id: 6,
        scientificName: 'Rosa damascena',
        commonName: 'Hoa h·ªìng',
        categoryName: 'C√¢y hoa',
        description: 'Hoa h·ªìng l√† bi·ªÉu t∆∞·ª£ng c·ªßa t√¨nh y√™u v·ªõi h∆∞∆°ng th∆°m quy·∫øn r≈© v√† v·∫ª ƒë·∫πp ki√™u sa. C√≥ nhi·ªÅu m√†u s·∫Øc v√† gi·ªëng kh√°c nhau.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n, b√≥n ph√¢n ƒë·ªãnh k·ª≥, c·∫Øt t·ªâa c√†nh kh√¥, ph√≤ng tr·ª´ s√¢u b·ªánh.',
        lightRequirement: 'HIGH',
        waterRequirement: 'HIGH',
        careDifficulty: 'MODERATE',
        suitableLocation: 'S√¢n v∆∞·ªùn, ban c√¥ng c√≥ √°nh n·∫Øng tr·ª±c ti·∫øp',
        commonDiseases: 'B·ªánh ƒë·ªëm ƒëen, r·ªâ s·∫Øt, r·ªáp v√† s√¢u r√≥m',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=6'],
        createdAt: '2024-02-20T08:30:00Z'
      },
      {
        id: 7,
        scientificName: 'Lavandula angustifolia',
        commonName: 'O·∫£i h∆∞∆°ng',
        categoryName: 'C√¢y th·∫£o d∆∞·ª£c',
        description: 'O·∫£i h∆∞∆°ng c√≥ h∆∞∆°ng th∆°m d·ªÖ ch·ªãu, gi√∫p th∆∞ gi√£n v√† c√≥ t√°c d·ª•ng ch·ªëng c√¥n tr√πng t·ª± nhi√™n. Hoa m√†u t√≠m ƒë·∫πp m·∫Øt.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc v·ª´a ph·∫£i, ƒë·∫∑t n∆°i c√≥ √°nh s√°ng tr·ª±c ti·∫øp, c·∫Øt t·ªâa sau khi ra hoa.',
        lightRequirement: 'HIGH',
        waterRequirement: 'LOW',
        careDifficulty: 'MODERATE',
        suitableLocation: 'S√¢n v∆∞·ªùn, ban c√¥ng c√≥ n·∫Øng, c·ª≠a s·ªï',
        commonDiseases: 'Th·ªëi r·ªÖ do t∆∞·ªõi n∆∞·ªõc qu√° nhi·ªÅu',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=7'],
        createdAt: '2024-03-01T13:45:00Z'
      },
      {
        id: 8,
        scientificName: 'Citrus limon',
        commonName: 'C√¢y chanh',
        categoryName: 'C√¢y ƒÉn qu·∫£',
        description: 'C√¢y chanh cho qu·∫£ chua, gi√†u vitamin C. C√≥ th·ªÉ tr·ªìng trong ch·∫≠u ho·∫∑c v∆∞·ªùn, v·ª´a c√≥ qu·∫£ ƒÉn v·ª´a l√†m c·∫£nh.',
        careInstructions: 'T∆∞·ªõi n∆∞·ªõc ƒë·ªÅu ƒë·∫∑n, b√≥n ph√¢n h·ªØu c∆°, ƒë·∫∑t n∆°i c√≥ √°nh s√°ng tr·ª±c ti·∫øp, t·ªâa c√†nh ƒë·ªÉ th√¥ng tho√°ng.',
        lightRequirement: 'HIGH',
        waterRequirement: 'HIGH',
        careDifficulty: 'MODERATE',
        suitableLocation: 'S√¢n v∆∞·ªùn, ban c√¥ng l·ªõn c√≥ n·∫Øng',
        commonDiseases: 'Canker, r·ªáp, nh·ªán ƒë·ªè, thi·∫øu dinh d∆∞·ª°ng',
        status: 'APPROVED',
        imageUrls: ['https://picsum.photos/400/300?random=8'],
        createdAt: '2024-03-05T15:20:00Z'
      }
    ];
  }

  ngOnDestroy(): void {
    if (this.navigationSubscription) {
      this.navigationSubscription.unsubscribe();
    }
    if (this.searchDebounce) {
      clearTimeout(this.searchDebounce);
    }
  }

  /**
   * Track function ƒë·ªÉ tr√°nh duplicate keys
   */
  trackByPlantId(index: number, plant: Plant): string {
    return `${plant.id}-${index}`;
  }

  private refreshData() {
    console.log('üîÑ Refreshing plant data after create operation');
    this.currentPage = 0;
    this.searchText = '';
    this.currentKeyword = '';
    this.plantsSubject.next([]);
    this.totalElements = 0;
    this.totalPages = 0;
    this.fetchPlants(0, '');
  }

  filterByCategory(categoryId: number) {
    this.selectedCategoryId = categoryId;
    // L∆∞u category ƒë√£ ch·ªçn v√†o localStorage ƒë·ªÉ gi·ªØ tr·∫°ng th√°i khi reload
    try {
      localStorage.setItem('selectedCategoryId', String(categoryId));
    } catch {}
  }

  // Th√™m h√†m ƒë·ªÉ filter trong template n·∫øu c·∫ßn
  filterPlantsByCategory(plants: any[]): any[] {
    if (!this.selectedCategoryId) return plants;
    return plants.filter(p => p.categoryId === this.selectedCategoryId);
  }
}
