import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { TopNavigatorComponent } from '../../shared/top-navigator/index';
import { CookieService } from '../../auth/cookie.service';
import { PlantDataService, Plant } from '../../shared/plant-data.service';
import { AuthDialogService } from '../../auth/auth-dialog.service';

/**
 * Interface ƒë·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu chi ti·∫øt c·ªßa c√¢y
 */
interface PlantDetail extends Plant {
  // Extend Plant interface if needed for additional detail fields
}

/**
 * Component hi·ªÉn th·ªã chi ti·∫øt th√¥ng tin c·ªßa m·ªôt c√¢y
 * Y√™u c·∫ßu ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin ƒë·∫ßy ƒë·ªß
 */
@Component({
  selector: 'app-plant-detail',
  standalone: true,
  imports: [CommonModule, TopNavigatorComponent],
  templateUrl: './plant-detail.component.html',
  styleUrl: './plant-detail.component.scss'
})
export class PlantDetailComponent implements OnInit {
  // D·ªØ li·ªáu c√¢y
  plant: PlantDetail | null = null;
  
  // Tr·∫°ng th√°i loading - b·∫Øt ƒë·∫ßu v·ªõi false ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã loading state
  loading = false;
  
  // Th√¥ng b√°o l·ªói
  error = '';
  
  // ·∫¢nh ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ hi·ªÉn th·ªã
  selectedImage = '';
  
  // C√≥ y√™u c·∫ßu x√°c th·ª±c kh√¥ng
  requiresAuth = false;

  // Ki·ªÉm tra xem c√≥ hi·ªÉn th·ªã th√¥ng tin gi·ªõi h·∫°n kh√¥ng
  isLimitedInfo = false;

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private http: HttpClient,
    private cookieService: CookieService,
    private plantDataService: PlantDataService,
    private authDialogService: AuthDialogService
  ) {}

  ngOnInit(): void {
    console.log('PlantDetailComponent ngOnInit called');
    this.loadPlantDetail();
  }

  /**
   * T·∫£i th√¥ng tin chi ti·∫øt c·ªßa c√¢y
   * ∆Øu ti√™n: Service data ‚Üí Public endpoint ‚Üí Search fallback ‚Üí Auth endpoint
   */
  loadPlantDetail(): void {
    const id = this.route.snapshot.paramMap.get('id');
    if (!id) {
      this.error = 'ID c√¢y kh√¥ng h·ª£p l·ªá';
      return;
    }

    const plantId = parseInt(id);
    // Kh√¥ng hi·ªÉn th·ªã loading state ƒë·ªÉ UX m∆∞·ª£t m√† h∆°n
    // this.loading = true;
    this.error = '';
    this.requiresAuth = false;
    this.isLimitedInfo = false;

    console.log('üöÄ Starting loadPlantDetail for ID:', plantId);

    // G·ªçi ngay l·∫≠p t·ª©c thay v√¨ setTimeout
    this.loadFromServiceFirst(plantId);
  }

  /**
   * Th·ª≠ load t·ª´ service tr∆∞·ªõc (ƒë√£ c√≥ data t·ª´ trang list)
   */
  private loadFromServiceFirst(plantId: number): void {
    console.log('=== LOADING PLANT DETAIL ===');
    console.log('Plant ID:', plantId);
    
    // Ki·ªÉm tra auth token tr∆∞·ªõc
    const token = this.cookieService.getAuthToken();
    console.log('Has auth token:', !!token);
    
    // 1. Th·ª≠ t·ª´ localStorage cache tr∆∞·ªõc
    const cachedPlant = this.loadCachedPlant(plantId);
    if (cachedPlant) {
      console.log('‚úÖ Found plant in localStorage cache:', cachedPlant);
      this.plant = cachedPlant;
      this.isLimitedInfo = !token; // Limited n·∫øu kh√¥ng c√≥ token
      if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
        this.selectedImage = this.plant.imageUrls[0];
      }
      
      // V·∫´n th·ª≠ upgrade n·∫øu c√≥ token
      if (token) {
        this.tryUpgradeToFullDataImmediate(plantId.toString());
      }
      return;
    }
    
    // 2. Th·ª≠ l·∫•y t·ª´ selected plant
    const selectedPlant = this.plantDataService.getSelectedPlant();
    console.log('Selected plant from service:', selectedPlant);
    
    if (selectedPlant && selectedPlant.id === plantId) {
      console.log('‚úÖ Found plant in selected plant:', selectedPlant);
      this.plant = selectedPlant;
      // this.loading = false; // Kh√¥ng c·∫ßn set loading
      
      // Cache plant data
      this.cachePlant(selectedPlant);
      
      // N·∫øu c√≥ token, th·ª≠ l·∫•y full data ngay l·∫≠p t·ª©c thay v√¨ hi·ªÉn th·ªã limited info
      if (token) {
        console.log('User is authenticated, trying to get full data immediately');
        this.isLimitedInfo = false; // T·∫°m th·ªùi set false
        this.tryUpgradeToFullDataImmediate(plantId.toString());
      } else {
        this.isLimitedInfo = true; // Ch·ªâ set limited khi kh√¥ng c√≥ token
      }
      
      if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
        this.selectedImage = this.plant.imageUrls[0];
      }
      return;
    }

    // 3. Th·ª≠ t√¨m t·ª´ cached plants list
    const cachedListPlant = this.plantDataService.getPlantById(plantId);
    console.log('Cached plant from service:', cachedListPlant);
    
    if (cachedListPlant) {
      console.log('‚úÖ Found plant in cached list:', cachedListPlant);
      this.plant = cachedListPlant;
      // this.loading = false; // Kh√¥ng c·∫ßn set loading
      
      // Cache plant data
      this.cachePlant(cachedListPlant);
      
      // N·∫øu c√≥ token, th·ª≠ l·∫•y full data ngay l·∫≠p t·ª©c
      if (token) {
        console.log('User is authenticated, trying to get full data immediately');
        this.isLimitedInfo = false;
        this.tryUpgradeToFullDataImmediate(plantId.toString());
      } else {
        this.isLimitedInfo = true;
      }
      
      if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
        this.selectedImage = this.plant.imageUrls[0];
      }
      return;
    }

    // 4. Kh√¥ng c√≥ data trong service, th·ª≠ API
    console.log('‚ùå No cached data, trying API endpoints');
    this.tryPublicDetailEndpoint(plantId.toString());
  }

  /**
   * Th·ª≠ upgrade data hi·ªán t·∫°i l√™n full data (background)
   */
  private tryUpgradeToFullData(id: string): void {
    const token = this.cookieService.getAuthToken();
    if (token) {
      // C√≥ token, th·ª≠ l·∫•y full data ·ªü background
      this.http.get<any>(`/api/plants/detail/${id}`).subscribe({
        next: (response) => {
          if (response && (response.data || response.id)) {
            console.log('Upgraded to full data:', response);
            this.plant = response.data || response;
            this.isLimitedInfo = false; // ƒê√£ c√≥ full data
            if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
              this.selectedImage = this.plant.imageUrls[0];
            }
          }
        },
        error: (err) => {
          console.log('Cannot upgrade to full data:', err);
          // Kh√¥ng upgrade ƒë∆∞·ª£c c≈©ng kh√¥ng sao, v·∫´n hi·ªÉn th·ªã basic data
        }
      });
    }
  }

  /**
   * Th·ª≠ upgrade data hi·ªán t·∫°i l√™n full data ngay l·∫≠p t·ª©c (kh√¥ng background)
   */
  private tryUpgradeToFullDataImmediate(id: string): void {
    console.log('Trying immediate upgrade to full data for ID:', id);
    
    this.http.get<any>(`/api/plants/detail/${id}`).subscribe({
      next: (response) => {
        if (response && (response.data || response.id)) {
          console.log('‚úÖ Successfully upgraded to full data:', response);
          this.plant = response.data || response;
          this.isLimitedInfo = false; // ƒê√£ c√≥ full data
          if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
            this.selectedImage = this.plant.imageUrls[0];
          }
        } else {
          console.log('‚ö†Ô∏è Full data response invalid, keeping basic data');
          this.isLimitedInfo = true;
        }
      },
      error: (err) => {
        console.log('‚ùå Cannot get full data:', err);
        // N·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c full data, gi·ªØ basic data v√† ƒë√°nh d·∫•u limited
        this.isLimitedInfo = true;
        
        // N·∫øu l·ªói 403/401, c√≥ th·ªÉ token h·∫øt h·∫°n
        if (err.message && (err.message.includes('403') || err.message.includes('401'))) {
          console.log('Auth token may be expired');
        }
      }
    });
  }

  /**
   * Th·ª≠ endpoint /api/plants/{id} tr∆∞·ªõc (c√≥ th·ªÉ l√† public)
   * @param id ID c·ªßa c√¢y
   */
  private tryPublicDetailEndpoint(id: string): void {
    const token = this.cookieService.getAuthToken();
    
    this.http.get<any>(`/api/plants/${id}`).subscribe({
      next: (response) => {
        console.log('Public detail endpoint response:', response); // Debug log
        // this.loading = false; // Kh√¥ng hi·ªÉn th·ªã loading
        if (response && (response.data || response.id)) {
          // X·ª≠ l√Ω response - c√≥ th·ªÉ l√† response.data ho·∫∑c tr·ª±c ti·∫øp response
          this.plant = response.data || response;
          
          // N·∫øu c√≥ token, endpoint n√†y s·∫Ω tr·∫£ v·ªÅ th√¥ng tin ƒë·∫ßy ƒë·ªß
          // N·∫øu kh√¥ng c√≥ token, s·∫Ω l√† th√¥ng tin c∆° b·∫£n
          this.isLimitedInfo = !token;
          
          console.log(`Data loaded from public endpoint. Has token: ${!!token}, isLimitedInfo: ${this.isLimitedInfo}`);
          
          if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
            this.selectedImage = this.plant.imageUrls[0];
          }
        } else {
          console.log('No valid data in public detail response, trying search fallback');
          this.tryPublicSearchFallback(id);
        }
      },
      error: (err) => {
        console.log('Public detail endpoint failed (error:', err?.status || 'unknown', '), trying search fallback');
        // N·∫øu c√≥ token v√† g·∫∑p l·ªói, th·ª≠ endpoint authenticated
        if (token) {
          console.log('Has token, trying authenticated endpoint');
          this.fetchPlantDetailWithAuth(id);
        } else {
          this.tryPublicSearchFallback(id);
        }
      }
    });
  }

  /**
   * Th·ª≠ truy c·∫≠p th√¥ng tin c√¢y th√¥ng qua endpoint search public (fallback)
   * @param id ID c·ªßa c√¢y
   */
  private tryPublicSearchFallback(id: string): void {
    console.log('Trying public search fallback for ID:', id);
    
    // Th·ª≠ t√¨m c√¢y trong search results ƒë·ªÉ l·∫•y th√¥ng tin c∆° b·∫£n
    this.http.get<any>(`/api/plants/search?pageNo=0&pageSize=100`).subscribe({
      next: (response) => {
        console.log('Search fallback response:', response);
        if (response?.data?.plants) {
          const foundPlant = response.data.plants.find((p: any) => p.id.toString() === id);
          if (foundPlant) {
            console.log('‚úÖ Found plant in search results:', foundPlant);
            // T√¨m th·∫•y c√¢y trong danh s√°ch public, hi·ªÉn th·ªã th√¥ng tin c∆° b·∫£n
            this.plant = foundPlant;
            // this.loading = false; // Kh√¥ng hi·ªÉn th·ªã loading
            this.isLimitedInfo = true; // ƒê√°nh d·∫•u l√† th√¥ng tin gi·ªõi h·∫°n
            if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
              this.selectedImage = this.plant.imageUrls[0];
            }
            return;
          } else {
            console.log('‚ùå Plant not found in search results');
          }
        }
        // Kh√¥ng t√¨m th·∫•y trong search public, th·ª≠ endpoint detail v·ªõi auth
        console.log('Trying authenticated access...');
        this.tryAuthenticatedAccess(id);
      },
      error: (err) => {
        console.log('Search fallback failed:', err);
        // L·ªói search public, th·ª≠ endpoint detail v·ªõi auth
        this.tryAuthenticatedAccess(id);
      }
    });
  }

  /**
   * Th·ª≠ truy c·∫≠p endpoint detail v·ªõi authentication
   * @param id ID c·ªßa c√¢y
   */
  private tryAuthenticatedAccess(id: string): void {
    const token = this.cookieService.getAuthToken();
    
    console.log('tryAuthenticatedAccess - Has token:', !!token);
    
    if (!token) {
      console.log('No token, showing auth required');
      // this.loading = false; // Kh√¥ng hi·ªÉn th·ªã loading
      this.requiresAuth = true;
      return;
    }

    console.log('Trying to fetch plant detail with auth...');
    this.fetchPlantDetailWithAuth(id);
  }

  /**
   * G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin chi ti·∫øt c√¢y v·ªõi x√°c th·ª±c
   * @param id ID c·ªßa c√¢y
   */
  private fetchPlantDetailWithAuth(id: string): void {
    this.http.get<any>(`/api/plants/detail/${id}`).subscribe({
      next: (response) => {
        console.log('Auth endpoint response:', response);
        // this.loading = false; // Kh√¥ng hi·ªÉn th·ªã loading
        if (response && (response.data || response.id)) {
          console.log('‚úÖ Successfully loaded plant with auth');
          this.plant = response.data || response;
          this.isLimitedInfo = false; // Th√¥ng tin ƒë·∫ßy ƒë·ªß
          console.log('Set isLimitedInfo to false - Full data loaded');
          
          // Cache the full data
          if (this.plant) {
            this.cachePlant(this.plant);
          }
          
          // ƒê·∫∑t ·∫£nh ƒë·∫ßu ti√™n l√†m ·∫£nh ch√≠nh
          if (this.plant?.imageUrls && this.plant.imageUrls.length > 0) {
            this.selectedImage = this.plant.imageUrls[0];
          }
        } else {
          console.log('‚ùå No valid data in auth response');
          this.error = 'Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¢y';
        }
      },
      error: (err) => {
        // this.loading = false; // Kh√¥ng hi·ªÉn th·ªã loading
        console.error('‚ùå Error loading plant detail with auth:', err);
        
        // Ki·ªÉm tra lo·∫°i l·ªói
        if (err.status === 404) {
          this.error = 'Kh√¥ng t√¨m th·∫•y th√¥ng tin c√¢y v·ªõi ID n√†y';
        } else if (err.status === 403 || err.status === 401) {
          console.log('Auth failed, showing auth required');
          this.requiresAuth = true;
        } else {
          this.error = 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin c√¢y. Vui l√≤ng th·ª≠ l·∫°i.';
        }
      }
    });
  }

  /**
   * Ch·ªçn ·∫£nh ƒë·ªÉ hi·ªÉn th·ªã trong gallery
   * @param imageUrl URL c·ªßa ·∫£nh
   */
  selectImage(imageUrl: string): void {
    this.selectedImage = imageUrl;
  }

  /**
   * Quay l·∫°i trang danh s√°ch c√¢y
   */
  goBack(): void {
    this.router.navigate(['/plant-info']);
  }

  /**
   * Chuy·ªÉn ƒë·∫øn trang ƒëƒÉng nh·∫≠p
   */
  goToLogin(): void {
    this.router.navigate(['/login']);
  }

  /**
   * M·ªü dialog ƒëƒÉng nh·∫≠p
   */
  openLoginDialog(): void {
    this.authDialogService.openLoginDialog();
    // Subscribe to auth state changes ƒë·ªÉ reload khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng
    // (gi·∫£ s·ª≠ AuthDialogService c√≥ c∆° ch·∫ø th√¥ng b√°o khi auth state thay ƒë·ªïi)
  }

  /**
   * Format ng√†y th√°ng theo ƒë·ªãnh d·∫°ng Vi·ªát Nam
   * @param dateString Chu·ªói ng√†y th√°ng
   * @returns Ng√†y th√°ng ƒë√£ format
   */
  formatDate(dateString: string): string {
    if (!dateString) return '';
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN');
  }

  /**
   * Reload l·∫°i th√¥ng tin c√¢y (d√πng cho button retry)
   */
  reloadPlantDetail(): void {
    this.loadPlantDetail();
  }

  /**
   * Load cached plant data from localStorage
   */
  private loadCachedPlant(plantId: number): Plant | null {
    try {
      const cached = localStorage.getItem(`plant_${plantId}`);
      if (cached) {
        const plantData = JSON.parse(cached);
        // Check if cache is still valid (e.g., less than 5 minutes old)
        const cacheTime = new Date(plantData.cachedAt).getTime();
        const now = new Date().getTime();
        if (now - cacheTime < 5 * 60 * 1000) { // 5 minutes
          console.log('‚úÖ Found cached plant data:', plantData.plant);
          return plantData.plant;
        }
      }
    } catch (e) {
      console.log('Failed to load cached plant:', e);
    }
    return null;
  }

  /**
   * Cache plant data to localStorage
   */
  private cachePlant(plant: Plant): void {
    try {
      const cacheData = {
        plant: plant,
        cachedAt: new Date().toISOString()
      };
      localStorage.setItem(`plant_${plant.id}`, JSON.stringify(cacheData));
      console.log('üíæ Cached plant data for ID:', plant.id);
    } catch (e) {
      console.log('Failed to cache plant:', e);
    }
  }
}
