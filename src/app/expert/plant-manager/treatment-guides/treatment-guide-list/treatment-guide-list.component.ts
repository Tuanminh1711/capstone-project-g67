import { Component, OnInit, OnDestroy, ChangeDetectorRef, ChangeDetectionStrategy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, ActivatedRoute } from '@angular/router';
import { FormsModule } from '@angular/forms';
import { Subject, takeUntil } from 'rxjs';
import { TreatmentGuideService } from '../treatment-guide.service';
import { DiseaseService } from '../../diseases/shared/disease.service';
import { ToastService } from '../../../../shared/toast/toast.service';

@Component({
  selector: 'app-treatment-guide-list',
  standalone: true,
  imports: [
    CommonModule,
    RouterModule,
    FormsModule
  ],
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: `
    <div class="page-container">
      <div class="page-header">
        <h1>Danh s√°ch h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã</h1>
        <p class="subtitle">Qu·∫£n l√Ω c√°c ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã b·ªánh c√¢y hi·ªáu qu·∫£</p>
      </div>

      <div class="content-wrapper">
        <!-- Disease Selection Card -->
        <div class="selection-card">
          <div class="card-header">
            <h2>Ch·ªçn b·ªánh c√¢y ƒë·ªÉ xem h∆∞·ªõng d·∫´n</h2>
            <button class="btn-create" routerLink="/expert/plant-manager/treatment-guides/create">
              T·∫°o h∆∞·ªõng d·∫´n m·ªõi
            </button>
          </div>
          
          <div class="disease-selector">
            <select 
              [(ngModel)]="selectedDiseaseId" 
              (ngModelChange)="onDiseaseChange()"
              class="disease-select"
              [disabled]="isLoadingDiseases">
              <option value="" [value]="null">
                {{ isLoadingDiseases ? 'ƒêang t·∫£i danh s√°ch b·ªánh...' : '-- Ch·ªçn b·ªánh c√¢y ƒë·ªÉ xem h∆∞·ªõng d·∫´n --' }}
              </option>
              <option *ngFor="let disease of diseases; trackBy: trackByDiseaseId" [value]="disease.id">
                {{ disease.diseaseName || disease.name || 'B·ªánh kh√¥ng t√™n' }}
              </option>
            </select>
          </div>
        </div>

        <!-- Loading State -->
        <div *ngIf="isLoadingGuides" class="loading-card">
          <div class="loading-content">
            <div class="loading-spinner"></div>
            <p>ƒêang t·∫£i h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã...</p>
          </div>
        </div>

        <!-- Treatment Guides Grid -->
        <div *ngIf="!isLoadingGuides && selectedDiseaseId && treatmentGuides.length > 0" class="guides-container">
          <div class="guides-header">
            <div class="header-info">
              <h3>H∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã</h3>
              <span class="guide-count">{{ treatmentGuides.length }} h∆∞·ªõng d·∫´n</span>
            </div>
            <div class="disease-info">
              <span>B·ªánh: {{ getSelectedDiseaseName() }}</span>
            </div>
          </div>
          
          <div class="guides-grid">
            <div *ngFor="let guide of treatmentGuides; let i = index; trackBy: trackByGuideId" class="guide-card">
              <div class="step-indicator">
                <span class="step-number">{{ guide.stepNumber }}</span>
              </div>
              
              <div class="guide-content">
                <h4 class="guide-title">{{ guide.title }}</h4>
                <p class="guide-description">{{ guide.description | slice:0:120 }}<span *ngIf="guide.description && guide.description.length > 120">...</span></p>
                
                <div class="guide-meta" *ngIf="guide.createdAt">
                  <span class="created-date">{{ guide.createdAt | date:'dd/MM/yyyy' }}</span>
                  <span class="updated-date" *ngIf="guide.updatedAt && guide.updatedAt !== guide.createdAt">
                    C·∫≠p nh·∫≠t: {{ guide.updatedAt | date:'dd/MM/yyyy' }}
                  </span>
                </div>
              </div>
              
              <div class="guide-actions">
                <button class="action-btn view-btn" (click)="viewGuide(guide.id)" title="Xem chi ti·∫øt">
                  Xem
                </button>
                <button class="action-btn edit-btn" (click)="editGuide(guide.id)" title="Ch·ªânh s·ª≠a">
                  S·ª≠a
                </button>
                <button class="action-btn delete-btn" (click)="deleteGuide(guide.id)" title="X√≥a">
                  X√≥a
                </button>
              </div>
            </div>
          </div>
          
          <div class="add-more-section">
            <button class="btn-add-step" [routerLink]="['/expert/plant-manager/treatment-guides/create', selectedDiseaseId]">
              Th√™m b∆∞·ªõc ƒëi·ªÅu tr·ªã ti·∫øp theo
            </button>
          </div>
        </div>

        <!-- No Guides State -->
        <div *ngIf="!isLoadingGuides && selectedDiseaseId && treatmentGuides.length === 0" class="empty-state">
          <div class="empty-content">
            <div class="empty-icon"></div>
            <h3>Ch∆∞a c√≥ h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã</h3>
            <p>B·ªánh "{{ getSelectedDiseaseName() }}" ch∆∞a c√≥ h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã n√†o.</p>
            <button class="btn-create-first" [routerLink]="['/expert/plant-manager/treatment-guides/create', selectedDiseaseId]">
              T·∫°o h∆∞·ªõng d·∫´n ƒë·∫ßu ti√™n
            </button>
          </div>
        </div>

        <!-- Initial Instructions -->
        <div *ngIf="!selectedDiseaseId && !isLoadingDiseases" class="instructions-card">
          <div class="instructions-content">
            <h3>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</h3>
            <div class="instruction-steps">
              <div class="step">
                <span class="step-num">1</span>
                <span>Ch·ªçn b·ªánh c√¢y t·ª´ danh s√°ch ph√≠a tr√™n</span>
              </div>
              <div class="step">
                <span class="step-num">2</span>
                <span>Xem c√°c h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã c√≥ s·∫µn</span>
              </div>
              <div class="step">
                <span class="step-num">3</span>
                <span>T·∫°o m·ªõi ho·∫∑c ch·ªânh s·ª≠a h∆∞·ªõng d·∫´n</span>
              </div>
              <div class="step">
                <span class="step-num">4</span>
                <span>Qu·∫£n l√Ω c√°c b∆∞·ªõc ƒëi·ªÅu tr·ªã m·ªôt c√°ch c√≥ h·ªá th·ªëng</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  `,
  styleUrls: ['./treatment-guide-list.component.scss']
})
export class TreatmentGuideListComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();
  
  diseases: any[] = [];
  treatmentGuides: any[] = [];
  selectedDiseaseId: number | null = null;
  isLoadingDiseases = false;
  isLoadingGuides = false;

  constructor(
    private treatmentGuideService: TreatmentGuideService,
    private diseaseService: DiseaseService,
    private route: ActivatedRoute,
    private toastService: ToastService,
    private cdr: ChangeDetectorRef
  ) {}

  ngOnInit() {
    this.loadDiseases();
  }

  ngOnDestroy() {
    this.destroy$.next();
    this.destroy$.complete();
  }

  loadDiseases() {
    this.isLoadingDiseases = true;
    this.diseaseService.getAllPlantDiseases(0, 100)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          let diseaseArray: any[] = [];
          
          if (response && response.data && response.data.content && Array.isArray(response.data.content)) {
            diseaseArray = response.data.content;
          } else if (response && response.content && Array.isArray(response.content)) {
            diseaseArray = response.content;
          } else if (response && response.data && Array.isArray(response.data)) {
            diseaseArray = response.data;
          } else if (Array.isArray(response)) {
            diseaseArray = response;
          }
          
          this.diseases = diseaseArray;
          this.isLoadingDiseases = false;
          
          // Trigger change detection
          this.cdr.detectChanges();
          
          console.log('üåø Loaded diseases for treatment guides:', this.diseases.length);
        },
        error: (error) => {
          console.error('Error loading diseases:', error);
          this.toastService.error('‚ùå L·ªói khi t·∫£i danh s√°ch b·ªánh c√¢y');
          this.diseases = [];
          this.isLoadingDiseases = false;
          this.cdr.detectChanges();
        }
      });
  }

  onDiseaseChange() {
    console.log('üîÑ Disease selection changed:', this.selectedDiseaseId);
    
    // Clear previous guides immediately
    this.treatmentGuides = [];
    this.cdr.detectChanges();
    
    if (this.selectedDiseaseId) {
      this.loadTreatmentGuides();
    }
  }

  loadTreatmentGuides() {
    if (!this.selectedDiseaseId) return;

    this.isLoadingGuides = true;
    this.cdr.detectChanges();
    
    console.log('üîç Loading treatment guides for disease:', this.selectedDiseaseId);

    this.treatmentGuideService.getTreatmentGuidesByDisease(this.selectedDiseaseId)
      .pipe(takeUntil(this.destroy$))
      .subscribe({
        next: (response) => {
          console.log('üìã Treatment guides response:', response);
          
          if (response && response.data && Array.isArray(response.data)) {
            this.treatmentGuides = response.data;
          } else if (response && Array.isArray(response)) {
            this.treatmentGuides = response;
          } else {
            this.treatmentGuides = [];
          }

          // Sort by step number
          this.treatmentGuides.sort((a, b) => (a.stepNumber || 0) - (b.stepNumber || 0));
          
          this.isLoadingGuides = false;
          this.cdr.detectChanges();
          
          console.log('üìù Loaded treatment guides:', this.treatmentGuides.length);

          if (this.treatmentGuides.length > 0) {
            this.toastService.success(`‚úÖ T√¨m th·∫•y ${this.treatmentGuides.length} h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã`);
          }
        },
        error: (error) => {
          console.error('‚ùå Error loading treatment guides:', error);
          this.treatmentGuides = [];
          this.isLoadingGuides = false;
          this.cdr.detectChanges();
          this.toastService.error('‚ùå L·ªói khi t·∫£i h∆∞·ªõng d·∫´n ƒëi·ªÅu tr·ªã');
        }
      });
  }

  getSelectedDiseaseName(): string {
    if (!this.selectedDiseaseId) return '';
    const disease = this.diseases.find(d => d.id === Number(this.selectedDiseaseId));
    return disease ? (disease.diseaseName || disease.name || 'B·ªánh kh√¥ng t√™n') : '';
  }

  viewGuide(guideId: number) {
    // Navigate to view page
    console.log('üëÅÔ∏è Viewing guide:', guideId);
    // TODO: Implement navigation to view page
  }

  editGuide(guideId: number) {
    // Navigate to edit page
    console.log('‚úèÔ∏è Editing guide:', guideId);
    // TODO: Implement navigation to edit page
  }

  deleteGuide(guideId: number) {
    if (confirm('üóëÔ∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h∆∞·ªõng d·∫´n n√†y?')) {
      this.treatmentGuideService.deleteTreatmentGuide(guideId)
        .pipe(takeUntil(this.destroy$))
        .subscribe({
          next: () => {
            this.toastService.success('‚úÖ X√≥a h∆∞·ªõng d·∫´n th√†nh c√¥ng');
            this.loadTreatmentGuides(); // Reload list
          },
          error: (error) => {
            console.error('‚ùå Error deleting guide:', error);
            this.toastService.error('‚ùå L·ªói khi x√≥a h∆∞·ªõng d·∫´n');
          }
        });
    }
  }

  trackByDiseaseId(index: number, disease: any): number {
    return disease ? disease.id : index;
  }

  trackByGuideId(index: number, guide: any): number {
    return guide ? guide.id : index;
  }
}
